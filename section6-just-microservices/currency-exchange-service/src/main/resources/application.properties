spring.config.import=optional:configserver:

server.port=8000
spring.application.name=currency-exchange

spring.datasource.url=jdbc:h2:mem:testdb 
#set the url to a particular thing just because otherwise the url of the db is randomly generated. and maybe we'll want to use the url to refer to it in some places 
spring.jpa.show-sql=true
#shows all the sql that jpa generates




eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


resilience4j.retry.instances.sample-endpoint.maxRetryAttempts=5 
resilience4j.retry.instances.sample-endpoint.waitDuration=1s
# exponential backoff is the idea that after each time you try executing the same request and each time you fail.... you take a bit longer before trying to execute the same request again... it's used everywhere in places like aws
resilience4j.retry.instances.sample-endpoint.enableExponentialBackoff=true

# just an example of the properties you can set for the circuitbreaker... this wasn't necessary to make circuitbreaker to work... for more check here: https://resilience4j.readme.io/docs/getting-started-3
# this particular property was saying "hey if 90% of the requests are failing / taking too long to execute.... then instead of actually sending request to the service.... don't and instead just send back the default response...
resilience4j.circuitbreaker.instances.sample-endpoint.failureRateThreshold=90 

# just indicating... that this every 10 seconds sample-endpoint can max receive 7 requests.... any more requests than that won't even be considered 
resilience4j.ratelimiter.instances.sample-endpoint.limitRefreshPeriod=10s
resilience4j.ratelimiter.instances.sample-endpoint.limitForPeriod=7

#sample-endpoint can max be working w/ 4 requests at a time
resilience4j.bulkhead.instances.sample-endpoint.maxConcurrentCalls=4

#the % of requests - going into currency exchange service - that I want to keep track of
spring.sleuth.sampler.probabilty=1.0
spring.zipkin.baseUrl=http://localhost:9411